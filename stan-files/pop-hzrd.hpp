
// Code generated by stanc 341c813
#include <stan/model/model_header.hpp>
namespace pop_hzrd_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 69> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 32, column 4 to column 25)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 33, column 4 to column 21)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 36, column 4 to column 19)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 39, column 4 to column 24)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 42, column 4 to column 23)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 43, column 4 to column 35)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 44, column 4 to column 34)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 4 to column 27)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 76, column 12 to line 77, column 47)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 75, column 24 to line 78, column 9)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 75, column 8 to line 78, column 9)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 74, column 18 to line 79, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 74, column 4 to line 79, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 82, column 4 to column 25)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 83, column 4 to column 24)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 85, column 8 to line 87, column 45)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 88, column 8 to column 67)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 84, column 19 to line 89, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 84, column 4 to line 89, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 49, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 49, column 4 to column 19)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 52, column 4 to column 41)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 53, column 4 to column 34)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 54, column 4 to column 47)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 57, column 4 to column 53)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 58, column 4 to column 49)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 59, column 4 to column 48)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 60, column 4 to column 29)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 64, column 8 to line 65, column 40)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 63, column 18 to line 66, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 63, column 4 to line 66, column 5)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 68, column 4 to column 28)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 4, column 4 to column 10)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 5, column 4 to column 10)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 6, column 4 to column 10)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 9, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 9, column 4 to column 21)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 14 to column 15)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 4 to column 21)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 11, column 10 to column 11)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 11, column 4 to column 13)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 13, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 13, column 4 to column 16)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 16, column 4 to column 11)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 17, column 11 to column 13)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 17, column 4 to column 27)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 11 to column 13)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 15 to column 16)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 4 to column 27)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 19, column 15 to column 17)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 19, column 4 to column 19)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 21, column 11 to column 13)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 21, column 4 to column 22)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 24, column 4 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 25, column 11 to column 14)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 25, column 4 to column 26)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 11 to column 14)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 16 to column 17)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 4 to column 26)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 32, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 33, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 36, column 11 to column 12)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 44, column 20 to column 21)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 11 to column 14)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 16 to column 17)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 82, column 11 to column 13)",
 " (in '/Users/lawrencebull/Documents/work-documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 83, column 11 to column 13)"};




class pop_hzrd_model final : public model_base_crtp<pop_hzrd_model> {

 private:
  int N;
  int H;
  int K;
  Eigen::Matrix<double, -1, -1> Phi_data__;
  Eigen::Matrix<double, -1, -1> Psi_data__;
  std::vector<int> c;
  Eigen::Matrix<double, -1, 1> y_data__;
  int Nt;
  Eigen::Matrix<double, -1, -1> Phi_test_data__;
  Eigen::Matrix<double, -1, -1> Psi_test_data__;
  std::vector<int> c_test;
  Eigen::Matrix<double, -1, 1> y_test_data__;
  int Nxx;
  Eigen::Matrix<double, -1, -1> Phi_xx_data__;
  Eigen::Matrix<double, -1, -1> Psi_xx_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_test{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi_xx{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi_xx{nullptr, 0, 0};
 
 public:
  ~pop_hzrd_model() { }
  
  inline std::string model_name() const final { return "pop_hzrd_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 341c813", "stancflags = "};
  }
  
  
  pop_hzrd_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::pop_hzrd_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 33;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 34;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      
      current_statement__ = 34;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 35;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 35;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 36;
      stan::math::validate_non_negative_index("Phi", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization","Phi","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      Phi_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&Phi) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi_data__.data(), N, 2);
        
      
      {
        std::vector<local_scalar_t__> Phi_flat__;
        current_statement__ = 37;
        Phi_flat__ = context__.vals_r("Phi");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 37;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 37;
            stan::model::assign(Phi, Phi_flat__[(pos__ - 1)],
              "assigning variable Phi", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
            current_statement__ = 37;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 38;
      stan::math::validate_non_negative_index("Psi", "N", N);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("Psi", "H", H);
      current_statement__ = 40;
      context__.validate_dims("data initialization","Psi","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(H)});
      Psi_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, H,
          std::numeric_limits<double>::quiet_NaN());
      new (&Psi) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi_data__.data(), N, H);
        
      
      {
        std::vector<local_scalar_t__> Psi_flat__;
        current_statement__ = 40;
        Psi_flat__ = context__.vals_r("Psi");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 40;
            stan::model::assign(Psi, Psi_flat__[(pos__ - 1)],
              "assigning variable Psi", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      stan::math::validate_non_negative_index("c", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","c","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      c = std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 42;
      c = context__.vals_i("c");
      current_statement__ = 43;
      stan::math::validate_non_negative_index("y", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 44;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 44;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 44;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      context__.validate_dims("data initialization","Nt","int",
           std::vector<size_t>{});
      Nt = std::numeric_limits<int>::min();
      
      
      current_statement__ = 45;
      Nt = context__.vals_i("Nt")[(1 - 1)];
      current_statement__ = 46;
      stan::math::validate_non_negative_index("Phi_test", "Nt", Nt);
      current_statement__ = 47;
      context__.validate_dims("data initialization","Phi_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt),
            static_cast<size_t>(2)});
      Phi_test_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(Nt, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&Phi_test) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi_test_data__.data(), Nt, 2);
        
      
      {
        std::vector<local_scalar_t__> Phi_test_flat__;
        current_statement__ = 47;
        Phi_test_flat__ = context__.vals_r("Phi_test");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= Nt; ++sym2__) {
            current_statement__ = 47;
            stan::model::assign(Phi_test, Phi_test_flat__[(pos__ - 1)],
              "assigning variable Phi_test", stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("Psi_test", "Nt", Nt);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("Psi_test", "H", H);
      current_statement__ = 50;
      context__.validate_dims("data initialization","Psi_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt),
            static_cast<size_t>(H)});
      Psi_test_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(Nt, H,
          std::numeric_limits<double>::quiet_NaN());
      new (&Psi_test) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi_test_data__.data(), Nt, H);
        
      
      {
        std::vector<local_scalar_t__> Psi_test_flat__;
        current_statement__ = 50;
        Psi_test_flat__ = context__.vals_r("Psi_test");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= Nt; ++sym2__) {
            current_statement__ = 50;
            stan::model::assign(Psi_test, Psi_test_flat__[(pos__ - 1)],
              "assigning variable Psi_test", stan::model::index_uni(sym2__),
                                               stan::model::index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("c_test", "Nt", Nt);
      current_statement__ = 52;
      context__.validate_dims("data initialization","c_test","int",
           std::vector<size_t>{static_cast<size_t>(Nt)});
      c_test = std::vector<int>(Nt, std::numeric_limits<int>::min());
      
      
      current_statement__ = 52;
      c_test = context__.vals_i("c_test");
      current_statement__ = 53;
      stan::math::validate_non_negative_index("y_test", "Nt", Nt);
      current_statement__ = 54;
      context__.validate_dims("data initialization","y_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt)});
      y_test_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(Nt,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_test) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_test_data__.data(), Nt);
        
      
      {
        std::vector<local_scalar_t__> y_test_flat__;
        current_statement__ = 54;
        y_test_flat__ = context__.vals_r("y_test");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(y_test, y_test_flat__[(pos__ - 1)],
            "assigning variable y_test", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      context__.validate_dims("data initialization","Nxx","int",
           std::vector<size_t>{});
      Nxx = std::numeric_limits<int>::min();
      
      
      current_statement__ = 55;
      Nxx = context__.vals_i("Nxx")[(1 - 1)];
      current_statement__ = 56;
      stan::math::validate_non_negative_index("Phi_xx", "Nxx", Nxx);
      current_statement__ = 57;
      context__.validate_dims("data initialization","Phi_xx","double",
           std::vector<size_t>{static_cast<size_t>(Nxx),
            static_cast<size_t>(2)});
      Phi_xx_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(Nxx, 2,
          std::numeric_limits<double>::quiet_NaN());
      new (&Phi_xx) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi_xx_data__.data(), Nxx, 2);
        
      
      {
        std::vector<local_scalar_t__> Phi_xx_flat__;
        current_statement__ = 57;
        Phi_xx_flat__ = context__.vals_r("Phi_xx");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            current_statement__ = 57;
            stan::model::assign(Phi_xx, Phi_xx_flat__[(pos__ - 1)],
              "assigning variable Phi_xx", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 57;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("Psi_xx", "Nxx", Nxx);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("Psi_xx", "H", H);
      current_statement__ = 60;
      context__.validate_dims("data initialization","Psi_xx","double",
           std::vector<size_t>{static_cast<size_t>(Nxx),
            static_cast<size_t>(H)});
      Psi_xx_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(Nxx, H,
          std::numeric_limits<double>::quiet_NaN());
      new (&Psi_xx) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi_xx_data__.data(), Nxx, H);
        
      
      {
        std::vector<local_scalar_t__> Psi_xx_flat__;
        current_statement__ = 60;
        Psi_xx_flat__ = context__.vals_r("Psi_xx");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            current_statement__ = 60;
            stan::model::assign(Psi_xx, Psi_xx_flat__[(pos__ - 1)],
              "assigning variable Psi_xx", stan::model::index_uni(sym2__),
                                             stan::model::index_uni(sym1__));
            current_statement__ = 60;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("intercepts", "K", K);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("slopes", "K", K);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("beta", "H", H);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("sigma_beta", "H", H);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("yhat_xx", "Nxx", Nxx);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("yhat_xx", "K", K);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("yhat_test", "Nt", Nt);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("lpy_test", "Nt", Nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + K + H + 1 + 2 + 2 + H;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 1;
      intercepts = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> slopes =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 2;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 5;
      mu_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 6;
      sigma_alpha = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                     lp__, H);
      {
        current_statement__ = 20;
        stan::math::validate_non_negative_index("yhat", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> yhat =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        current_statement__ = 22;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(mu_alpha,
            (Eigen::Matrix<double,1,-1>(2) << 0, 1.5).finished(),
            (Eigen::Matrix<double,1,-1>(2) << 2, .5).finished()));
        current_statement__ = 23;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(sigma_alpha, 1, 1));
        current_statement__ = 24;
        lp_accum__.add(
          stan::math::inv_gamma_lpdf<propto__>(
            stan::math::square(sigma_beta), 5e-3, 5e-3));
        current_statement__ = 25;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(intercepts,
            stan::model::rvalue(mu_alpha, "mu_alpha",
              stan::model::index_uni(1)),
            stan::model::rvalue(sigma_alpha, "sigma_alpha",
              stan::model::index_uni(1))));
        current_statement__ = 26;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(slopes,
            stan::model::rvalue(mu_alpha, "mu_alpha",
              stan::model::index_uni(2)),
            stan::model::rvalue(sigma_alpha, "sigma_alpha",
              stan::model::index_uni(2))));
        current_statement__ = 27;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(beta,
            stan::math::rep_vector(0, H), sigma_beta));
        current_statement__ = 28;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(sigma, 3, .8));
        current_statement__ = 31;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 29;
          stan::model::assign(yhat,
            (((stan::model::rvalue(Phi, "Phi",
                 stan::model::index_uni(i), stan::model::index_uni(1)) *
                stan::model::rvalue(intercepts, "intercepts",
                  stan::model::index_uni(stan::model::rvalue(c, "c",
                                           stan::model::index_uni(i))))) +
               (stan::model::rvalue(Phi, "Phi",
                  stan::model::index_uni(i), stan::model::index_uni(2)) *
                 stan::model::rvalue(slopes, "slopes",
                   stan::model::index_uni(stan::model::rvalue(c, "c",
                                            stan::model::index_uni(i)))))) +
              stan::math::dot_product(
                stan::model::rvalue(Psi, "Psi", stan::model::index_uni(i)),
                beta)), "assigning variable yhat", stan::model::index_uni(i));
        }
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(y, yhat, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> intercepts =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      intercepts = in__.template read<
                     Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> slopes =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> mu_alpha =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      mu_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<double, -1, 1> sigma_alpha =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      sigma_alpha = in__.template read_constrain_lb<
                      Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                      lp__, 2);
      Eigen::Matrix<double, -1, 1> sigma_beta =
         Eigen::Matrix<double, -1, 1>::Constant(H,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sigma_beta = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0,
                     lp__, H);
      out__.write(intercepts);
      out__.write(slopes);
      out__.write(beta);
      out__.write(sigma);
      out__.write(mu_alpha);
      out__.write(sigma_alpha);
      out__.write(sigma_beta);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> yhat_xx =
         Eigen::Matrix<double, -1, -1>::Constant(Nxx, K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 11;
        for (int i = 1; i <= Nxx; ++i) {
          current_statement__ = 9;
          stan::model::assign(yhat_xx,
            (((stan::model::rvalue(Phi_xx, "Phi_xx",
                 stan::model::index_uni(i), stan::model::index_uni(1)) *
                stan::model::rvalue(intercepts, "intercepts",
                  stan::model::index_uni(k))) +
               (stan::model::rvalue(Phi_xx, "Phi_xx",
                  stan::model::index_uni(i), stan::model::index_uni(2)) *
                 stan::model::rvalue(slopes, "slopes",
                   stan::model::index_uni(k)))) +
              stan::math::dot_product(
                stan::model::rvalue(Psi_xx, "Psi_xx",
                  stan::model::index_uni(i)), beta)),
            "assigning variable yhat_xx", stan::model::index_uni(i),
                                            stan::model::index_uni(k));
        }
      }
      Eigen::Matrix<double, -1, 1> yhat_test =
         Eigen::Matrix<double, -1, 1>::Constant(Nt,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> lpy_test =
         Eigen::Matrix<double, -1, 1>::Constant(Nt,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 19;
      for (int i = 1; i <= Nt; ++i) {
        current_statement__ = 16;
        stan::model::assign(yhat_test,
          (((stan::model::rvalue(Phi_test, "Phi_test",
               stan::model::index_uni(i), stan::model::index_uni(1)) *
              stan::model::rvalue(intercepts, "intercepts",
                stan::model::index_uni(stan::model::rvalue(c_test, "c_test",
                                         stan::model::index_uni(i))))) +
             (stan::model::rvalue(Phi_test, "Phi_test",
                stan::model::index_uni(i), stan::model::index_uni(2)) *
               stan::model::rvalue(slopes, "slopes",
                 stan::model::index_uni(stan::model::rvalue(c_test, "c_test",
                                          stan::model::index_uni(i)))))) +
            stan::math::dot_product(
              stan::model::rvalue(Psi_test, "Psi_test",
                stan::model::index_uni(i)), beta)),
          "assigning variable yhat_test", stan::model::index_uni(i));
        current_statement__ = 17;
        stan::model::assign(lpy_test,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(y_test, "y_test", stan::model::index_uni(i)),
            stan::model::rvalue(yhat_test, "yhat_test",
              stan::model::index_uni(i)), sigma),
          "assigning variable lpy_test", stan::model::index_uni(i));
      }
      out__.write(yhat_xx);
      out__.write(yhat_test);
      out__.write(lpy_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(intercepts, in__.read<local_scalar_t__>(),
          "assigning variable intercepts", stan::model::index_uni(sym1__));
      }
      out__.write(intercepts);
      Eigen::Matrix<local_scalar_t__, -1, 1> slopes =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        stan::model::assign(slopes, in__.read<local_scalar_t__>(),
          "assigning variable slopes", stan::model::index_uni(sym1__));
      }
      out__.write(slopes);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        stan::model::assign(beta, in__.read<local_scalar_t__>(),
          "assigning variable beta", stan::model::index_uni(sym1__));
      }
      out__.write(beta);
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(mu_alpha, in__.read<local_scalar_t__>(),
          "assigning variable mu_alpha", stan::model::index_uni(sym1__));
      }
      out__.write(mu_alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        stan::model::assign(sigma_alpha, in__.read<local_scalar_t__>(),
          "assigning variable sigma_alpha", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(H, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        stan::model::assign(sigma_beta, in__.read<local_scalar_t__>(),
          "assigning variable sigma_beta", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma_beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"intercepts", "slopes", "beta",
      "sigma", "mu_alpha", "sigma_alpha", "sigma_beta", "yhat_xx",
      "yhat_test", "lpy_test"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(H)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(Nxx), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(Nt)},
      std::vector<size_t>{static_cast<size_t>(Nt)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yhat_xx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yhat_test" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpy_test" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yhat_xx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yhat_test" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpy_test" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"yhat_xx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nxx) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yhat_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"lpy_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"yhat_xx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nxx) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yhat_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"lpy_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((K + K) + H) + 1) + 2) + 2) + H);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((Nxx * K) + Nt) + Nt);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((K + K) + H) + 1) + 2) + 2) + H);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  (((Nxx * K) + Nt) + Nt);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"intercepts", "slopes",
      "beta", "sigma", "mu_alpha", "sigma_alpha", "sigma_beta"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{K, K, 
       H, 1, 2, 2, H};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = pop_hzrd_model_namespace::pop_hzrd_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return pop_hzrd_model_namespace::profiles__;
}

#endif


