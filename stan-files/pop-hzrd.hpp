
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace pop_hzrd_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 69> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 32, column 4 to column 25)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 33, column 4 to column 21)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 36, column 4 to column 19)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 39, column 4 to column 24)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 42, column 4 to column 23)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 43, column 4 to column 35)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 44, column 4 to column 34)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 4 to column 27)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 76, column 12 to line 77, column 47)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 75, column 24 to line 78, column 9)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 75, column 8 to line 78, column 9)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 74, column 18 to line 79, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 74, column 4 to line 79, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 82, column 4 to column 25)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 83, column 4 to column 24)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 85, column 8 to line 87, column 45)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 88, column 8 to column 67)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 84, column 19 to line 89, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 84, column 4 to line 89, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 49, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 49, column 4 to column 19)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 52, column 4 to column 41)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 53, column 4 to column 34)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 54, column 4 to column 47)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 57, column 4 to column 53)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 58, column 4 to column 49)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 59, column 4 to column 48)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 60, column 4 to column 29)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 64, column 8 to line 65, column 40)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 63, column 18 to line 66, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 63, column 4 to line 66, column 5)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 68, column 4 to column 28)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 4, column 4 to column 10)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 5, column 4 to column 10)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 6, column 4 to column 10)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 9, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 9, column 4 to column 21)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 14 to column 15)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 10, column 4 to column 21)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 11, column 10 to column 11)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 11, column 4 to column 13)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 13, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 13, column 4 to column 16)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 16, column 4 to column 11)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 17, column 11 to column 13)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 17, column 4 to column 27)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 11 to column 13)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 15 to column 16)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 18, column 4 to column 27)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 19, column 15 to column 17)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 19, column 4 to column 19)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 21, column 11 to column 13)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 21, column 4 to column 22)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 24, column 4 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 25, column 11 to column 14)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 25, column 4 to column 26)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 11 to column 14)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 16 to column 17)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 26, column 4 to column 26)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 32, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 33, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 36, column 11 to column 12)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 44, column 20 to column 21)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 11 to column 14)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 73, column 16 to column 17)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 82, column 11 to column 13)",
 " (in '/Users/lbull/Library/CloudStorage/OneDrive-TheAlanTuringInstitute/Documents/EPR/EPRdev/stan-files/pop-hzrd.stan', line 83, column 11 to column 13)"};



class pop_hzrd_model final : public model_base_crtp<pop_hzrd_model> {

 private:
  int N;
  int H;
  int K;
  Eigen::Matrix<double, -1, -1> Phi__;
  Eigen::Matrix<double, -1, -1> Psi__;
  std::vector<int> c;
  Eigen::Matrix<double, -1, 1> y__;
  int Nt;
  Eigen::Matrix<double, -1, -1> Phi_test__;
  Eigen::Matrix<double, -1, -1> Psi_test__;
  std::vector<int> c_test;
  Eigen::Matrix<double, -1, 1> y_test__;
  int Nxx;
  Eigen::Matrix<double, -1, -1> Phi_xx__;
  Eigen::Matrix<double, -1, -1> Psi_xx__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi_test{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_test{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Phi_xx{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> Psi_xx{nullptr, 0, 0};
 
 public:
  ~pop_hzrd_model() { }
  
  inline std::string model_name() const final { return "pop_hzrd_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  pop_hzrd_model(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::pop_hzrd_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 33;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 33;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 34;
      context__.validate_dims("data initialization","H","int",
           std::vector<size_t>{});
      H = std::numeric_limits<int>::min();
      
      current_statement__ = 34;
      H = context__.vals_i("H")[(1 - 1)];
      current_statement__ = 35;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 35;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 36;
      validate_non_negative_index("Phi", "N", N);
      current_statement__ = 37;
      context__.validate_dims("data initialization","Phi","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(2)});
      Phi__ = Eigen::Matrix<double, -1, -1>(N, 2);
      new (&Phi) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi__.data(), N, 2);
      
      
      {
        std::vector<local_scalar_t__> Phi_flat__;
        current_statement__ = 37;
        Phi_flat__ = context__.vals_r("Phi");
        current_statement__ = 37;
        pos__ = 1;
        current_statement__ = 37;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 37;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 37;
            assign(Phi, Phi_flat__[(pos__ - 1)],
              "assigning variable Phi", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 37;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 38;
      validate_non_negative_index("Psi", "N", N);
      current_statement__ = 39;
      validate_non_negative_index("Psi", "H", H);
      current_statement__ = 40;
      context__.validate_dims("data initialization","Psi","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(H)});
      Psi__ = Eigen::Matrix<double, -1, -1>(N, H);
      new (&Psi) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi__.data(), N, H);
      
      
      {
        std::vector<local_scalar_t__> Psi_flat__;
        current_statement__ = 40;
        Psi_flat__ = context__.vals_r("Psi");
        current_statement__ = 40;
        pos__ = 1;
        current_statement__ = 40;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 40;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 40;
            assign(Psi, Psi_flat__[(pos__ - 1)],
              "assigning variable Psi", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 40;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 41;
      validate_non_negative_index("c", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","c","int",
           std::vector<size_t>{static_cast<size_t>(N)});
      c = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 42;
      c = context__.vals_i("c");
      current_statement__ = 43;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 44;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y__ = Eigen::Matrix<double, -1, 1>(N);
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 44;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 44;
          assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", index_uni(sym1__));
          current_statement__ = 44;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      context__.validate_dims("data initialization","Nt","int",
           std::vector<size_t>{});
      Nt = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      Nt = context__.vals_i("Nt")[(1 - 1)];
      current_statement__ = 46;
      validate_non_negative_index("Phi_test", "Nt", Nt);
      current_statement__ = 47;
      context__.validate_dims("data initialization","Phi_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt),
            static_cast<size_t>(2)});
      Phi_test__ = Eigen::Matrix<double, -1, -1>(Nt, 2);
      new (&Phi_test) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi_test__.data(), Nt, 2);
      
      
      {
        std::vector<local_scalar_t__> Phi_test_flat__;
        current_statement__ = 47;
        Phi_test_flat__ = context__.vals_r("Phi_test");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= Nt; ++sym2__) {
            current_statement__ = 47;
            assign(Phi_test, Phi_test_flat__[(pos__ - 1)],
              "assigning variable Phi_test", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 47;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 48;
      validate_non_negative_index("Psi_test", "Nt", Nt);
      current_statement__ = 49;
      validate_non_negative_index("Psi_test", "H", H);
      current_statement__ = 50;
      context__.validate_dims("data initialization","Psi_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt),
            static_cast<size_t>(H)});
      Psi_test__ = Eigen::Matrix<double, -1, -1>(Nt, H);
      new (&Psi_test) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi_test__.data(), Nt, H);
      
      
      {
        std::vector<local_scalar_t__> Psi_test_flat__;
        current_statement__ = 50;
        Psi_test_flat__ = context__.vals_r("Psi_test");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= Nt; ++sym2__) {
            current_statement__ = 50;
            assign(Psi_test, Psi_test_flat__[(pos__ - 1)],
              "assigning variable Psi_test", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 50;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 51;
      validate_non_negative_index("c_test", "Nt", Nt);
      current_statement__ = 52;
      context__.validate_dims("data initialization","c_test","int",
           std::vector<size_t>{static_cast<size_t>(Nt)});
      c_test = std::vector<int>(Nt, std::numeric_limits<int>::min());
      
      current_statement__ = 52;
      c_test = context__.vals_i("c_test");
      current_statement__ = 53;
      validate_non_negative_index("y_test", "Nt", Nt);
      current_statement__ = 54;
      context__.validate_dims("data initialization","y_test","double",
           std::vector<size_t>{static_cast<size_t>(Nt)});
      y_test__ = Eigen::Matrix<double, -1, 1>(Nt);
      new (&y_test) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_test__.data(), Nt);
      
      
      {
        std::vector<local_scalar_t__> y_test_flat__;
        current_statement__ = 54;
        y_test_flat__ = context__.vals_r("y_test");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
          current_statement__ = 54;
          assign(y_test, y_test_flat__[(pos__ - 1)],
            "assigning variable y_test", index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      context__.validate_dims("data initialization","Nxx","int",
           std::vector<size_t>{});
      Nxx = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      Nxx = context__.vals_i("Nxx")[(1 - 1)];
      current_statement__ = 56;
      validate_non_negative_index("Phi_xx", "Nxx", Nxx);
      current_statement__ = 57;
      context__.validate_dims("data initialization","Phi_xx","double",
           std::vector<size_t>{static_cast<size_t>(Nxx),
            static_cast<size_t>(2)});
      Phi_xx__ = Eigen::Matrix<double, -1, -1>(Nxx, 2);
      new (&Phi_xx) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Phi_xx__.data(), Nxx, 2);
      
      
      {
        std::vector<local_scalar_t__> Phi_xx_flat__;
        current_statement__ = 57;
        Phi_xx_flat__ = context__.vals_r("Phi_xx");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            current_statement__ = 57;
            assign(Phi_xx, Phi_xx_flat__[(pos__ - 1)],
              "assigning variable Phi_xx", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 57;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 58;
      validate_non_negative_index("Psi_xx", "Nxx", Nxx);
      current_statement__ = 59;
      validate_non_negative_index("Psi_xx", "H", H);
      current_statement__ = 60;
      context__.validate_dims("data initialization","Psi_xx","double",
           std::vector<size_t>{static_cast<size_t>(Nxx),
            static_cast<size_t>(H)});
      Psi_xx__ = Eigen::Matrix<double, -1, -1>(Nxx, H);
      new (&Psi_xx) Eigen::Map<Eigen::Matrix<double, -1, -1>>(Psi_xx__.data(), Nxx, H);
      
      
      {
        std::vector<local_scalar_t__> Psi_xx_flat__;
        current_statement__ = 60;
        Psi_xx_flat__ = context__.vals_r("Psi_xx");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 60;
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            current_statement__ = 60;
            assign(Psi_xx, Psi_xx_flat__[(pos__ - 1)],
              "assigning variable Psi_xx", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 60;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 61;
      validate_non_negative_index("intercepts", "K", K);
      current_statement__ = 62;
      validate_non_negative_index("slopes", "K", K);
      current_statement__ = 63;
      validate_non_negative_index("beta", "H", H);
      current_statement__ = 64;
      validate_non_negative_index("sigma_beta", "H", H);
      current_statement__ = 65;
      validate_non_negative_index("yhat_xx", "Nxx", Nxx);
      current_statement__ = 66;
      validate_non_negative_index("yhat_xx", "K", K);
      current_statement__ = 67;
      validate_non_negative_index("yhat_test", "Nt", Nt);
      current_statement__ = 68;
      validate_non_negative_index("lpy_test", "Nt", Nt);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = K + K + H + 1 + 2 + 2 + H;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> intercepts;
      intercepts = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(intercepts, DUMMY_VAR__);
      
      current_statement__ = 1;
      intercepts = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     K);
      Eigen::Matrix<local_scalar_t__, -1, 1> slopes;
      slopes = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(slopes, DUMMY_VAR__);
      
      current_statement__ = 2;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(H);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_alpha;
      mu_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(mu_alpha, DUMMY_VAR__);
      
      current_statement__ = 5;
      mu_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_alpha;
      sigma_alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
      stan::math::fill(sigma_alpha, DUMMY_VAR__);
      
      current_statement__ = 6;
      sigma_alpha = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                      0, lp__, 2);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_beta;
      sigma_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(H);
      stan::math::fill(sigma_beta, DUMMY_VAR__);
      
      current_statement__ = 7;
      sigma_beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                     0, lp__, H);
      {
        current_statement__ = 20;
        validate_non_negative_index("yhat", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> yhat;
        yhat = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(yhat, DUMMY_VAR__);
        
        current_statement__ = 22;
        lp_accum__.add(
          normal_lpdf<propto__>(mu_alpha, (Eigen::Matrix<double,1,-1>(2) <<
            0, 1.5).finished(), (Eigen::Matrix<double,1,-1>(2) << 2,
            .5).finished()));
        current_statement__ = 23;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigma_alpha, 1, 1));
        current_statement__ = 24;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(square(sigma_beta), 5e-3, 5e-3));
        current_statement__ = 25;
        lp_accum__.add(
          normal_lpdf<propto__>(intercepts,
            rvalue(mu_alpha, "mu_alpha", index_uni(1)),
            rvalue(sigma_alpha, "sigma_alpha", index_uni(1))));
        current_statement__ = 26;
        lp_accum__.add(
          normal_lpdf<propto__>(slopes,
            rvalue(mu_alpha, "mu_alpha", index_uni(2)),
            rvalue(sigma_alpha, "sigma_alpha", index_uni(2))));
        current_statement__ = 27;
        lp_accum__.add(
          normal_lpdf<propto__>(beta, rep_vector(0, H), sigma_beta));
        current_statement__ = 28;
        lp_accum__.add(inv_gamma_lpdf<propto__>(sigma, 3, .8));
        current_statement__ = 31;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 29;
          assign(yhat,
            (((rvalue(Phi, "Phi", index_uni(i), index_uni(1)) *
                rvalue(intercepts, "intercepts",
                  index_uni(rvalue(c, "c", index_uni(i))))) +
               (rvalue(Phi, "Phi", index_uni(i), index_uni(2)) *
                 rvalue(slopes, "slopes",
                   index_uni(rvalue(c, "c", index_uni(i)))))) +
              dot_product(rvalue(Psi, "Psi", index_uni(i)), beta)),
            "assigning variable yhat", index_uni(i));
        }
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(y, yhat, sigma));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pop_hzrd_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> intercepts;
      intercepts = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(intercepts, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      intercepts = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                     K);
      Eigen::Matrix<double, -1, 1> slopes;
      slopes = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(slopes, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      slopes = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(K);
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(H);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(H);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      Eigen::Matrix<double, -1, 1> mu_alpha;
      mu_alpha = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      mu_alpha = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                   2);
      Eigen::Matrix<double, -1, 1> sigma_alpha;
      sigma_alpha = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      sigma_alpha = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                      0, lp__, 2);
      Eigen::Matrix<double, -1, 1> sigma_beta;
      sigma_beta = Eigen::Matrix<double, -1, 1>(H);
      stan::math::fill(sigma_beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      sigma_beta = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                     0, lp__, H);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(intercepts[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(slopes[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu_alpha[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_alpha[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        vars__.emplace_back(sigma_beta[(sym1__ - 1)]);
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> yhat_xx;
      yhat_xx = Eigen::Matrix<double, -1, -1>(Nxx, K);
      stan::math::fill(yhat_xx, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int k = 1; k <= K; ++k) {
        current_statement__ = 11;
        for (int i = 1; i <= Nxx; ++i) {
          current_statement__ = 9;
          assign(yhat_xx,
            (((rvalue(Phi_xx, "Phi_xx", index_uni(i), index_uni(1)) *
                rvalue(intercepts, "intercepts", index_uni(k))) +
               (rvalue(Phi_xx, "Phi_xx", index_uni(i), index_uni(2)) *
                 rvalue(slopes, "slopes", index_uni(k)))) +
              dot_product(rvalue(Psi_xx, "Psi_xx", index_uni(i)), beta)),
            "assigning variable yhat_xx", index_uni(i), index_uni(k));
        }
      }
      Eigen::Matrix<double, -1, 1> yhat_test;
      yhat_test = Eigen::Matrix<double, -1, 1>(Nt);
      stan::math::fill(yhat_test, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> lpy_test;
      lpy_test = Eigen::Matrix<double, -1, 1>(Nt);
      stan::math::fill(lpy_test, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 19;
      for (int i = 1; i <= Nt; ++i) {
        current_statement__ = 16;
        assign(yhat_test,
          (((rvalue(Phi_test, "Phi_test", index_uni(i), index_uni(1)) *
              rvalue(intercepts, "intercepts",
                index_uni(rvalue(c_test, "c_test", index_uni(i))))) +
             (rvalue(Phi_test, "Phi_test", index_uni(i), index_uni(2)) *
               rvalue(slopes, "slopes",
                 index_uni(rvalue(c_test, "c_test", index_uni(i)))))) +
            dot_product(rvalue(Psi_test, "Psi_test", index_uni(i)), beta)),
          "assigning variable yhat_test", index_uni(i));
        current_statement__ = 17;
        assign(lpy_test,
          normal_lpdf<false>(rvalue(y_test, "y_test", index_uni(i)),
            rvalue(yhat_test, "yhat_test", index_uni(i)), sigma),
          "assigning variable lpy_test", index_uni(i));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
          vars__.emplace_back(
            rvalue(yhat_xx, "yhat_xx", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        vars__.emplace_back(yhat_test[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        vars__.emplace_back(lpy_test[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> intercepts;
      intercepts = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(intercepts, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> intercepts_flat__;
        current_statement__ = 1;
        intercepts_flat__ = context__.vals_r("intercepts");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(intercepts, intercepts_flat__[(pos__ - 1)],
            "assigning variable intercepts", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> slopes;
      slopes = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(slopes, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> slopes_flat__;
        current_statement__ = 2;
        slopes_flat__ = context__.vals_r("slopes");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          assign(slopes, slopes_flat__[(pos__ - 1)],
            "assigning variable slopes", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(H);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 3;
          assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      Eigen::Matrix<double, -1, 1> mu_alpha;
      mu_alpha = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(mu_alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_alpha_flat__;
        current_statement__ = 5;
        mu_alpha_flat__ = context__.vals_r("mu_alpha");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 5;
          assign(mu_alpha, mu_alpha_flat__[(pos__ - 1)],
            "assigning variable mu_alpha", index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sigma_alpha;
      sigma_alpha = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_alpha_flat__;
        current_statement__ = 6;
        sigma_alpha_flat__ = context__.vals_r("sigma_alpha");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 6;
          assign(sigma_alpha, sigma_alpha_flat__[(pos__ - 1)],
            "assigning variable sigma_alpha", index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sigma_alpha_free__;
      sigma_alpha_free__ = Eigen::Matrix<double, -1, 1>(2);
      stan::math::fill(sigma_alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 6;
        assign(sigma_alpha_free__,
          stan::math::lb_free(sigma_alpha[(sym1__ - 1)], 0),
          "assigning variable sigma_alpha_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, 1> sigma_beta;
      sigma_beta = Eigen::Matrix<double, -1, 1>(H);
      stan::math::fill(sigma_beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_beta_flat__;
        current_statement__ = 7;
        sigma_beta_flat__ = context__.vals_r("sigma_beta");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
          current_statement__ = 7;
          assign(sigma_beta, sigma_beta_flat__[(pos__ - 1)],
            "assigning variable sigma_beta", index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sigma_beta_free__;
      sigma_beta_free__ = Eigen::Matrix<double, -1, 1>(H);
      stan::math::fill(sigma_beta_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        current_statement__ = 7;
        assign(sigma_beta_free__,
          stan::math::lb_free(sigma_beta[(sym1__ - 1)], 0),
          "assigning variable sigma_beta_free__", index_uni(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(intercepts[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(slopes[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        vars__.emplace_back(beta[(sym1__ - 1)]);
      }
      vars__.emplace_back(sigma_free__);
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(mu_alpha[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.emplace_back(sigma_alpha_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
        vars__.emplace_back(sigma_beta_free__[(sym1__ - 1)]);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"intercepts", "slopes", "beta",
      "sigma", "mu_alpha", "sigma_alpha", "sigma_beta", "yhat_xx",
      "yhat_test", "lpy_test"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(K)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(H)}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(H)},
      std::vector<size_t>{static_cast<size_t>(Nxx), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(Nt)},
      std::vector<size_t>{static_cast<size_t>(Nt)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yhat_xx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yhat_test" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpy_test" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "intercepts" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "slopes" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "sigma");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_alpha" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= H; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_beta" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nxx; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "yhat_xx" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "yhat_test" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= Nt; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lpy_test" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"yhat_xx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nxx) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yhat_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"lpy_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"intercepts\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"slopes\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"sigma_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(H) + "},\"block\":\"parameters\"},{\"name\":\"yhat_xx\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nxx) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"yhat_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"},{\"name\":\"lpy_test\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(Nt) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = pop_hzrd_model_namespace::pop_hzrd_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return pop_hzrd_model_namespace::profiles__;
}

#endif


